width = 0.1, color = "black") +
geom_hline(yintercept = 0.25, linetype = "dotted", color = "black") +
annotate("text", x = 3.35, y = 0.27, label = "Chance",
hjust = 0, size = 3, color = "black") +
theme_minimal() +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
labs(
title = "Participant Accuracy by Condition",
x = "Condition",
y = "Accuracy"
)
condition_accuracy <- data %>%
group_by(condition) %>%
summarise(Accuracy = mean(correct), .groups = 'drop')
condition_accuracy
img_acc_c1 <- data_c1 %>%
group_by(correct_image) %>%
summarize(accuracy = mean(correct, na.rm = TRUE))
ggplot(img_acc_c1, aes(x = correct_image, y = accuracy)) +
geom_line(color = "grey",linewidth = 1) +
geom_point(size = 1) +
scale_x_continuous(breaks = seq(min(data$correct_image), max(data$correct_image), 1)) +
labs(x = "Per Image", y = "Accuracy", title = "Condition1")
img_acc_c2 <- data_c2 %>%
group_by(correct_image) %>%
summarize(accuracy = mean(correct, na.rm = TRUE))
ggplot(img_acc_c2, aes(x = correct_image, y = accuracy)) +
geom_line(color = "grey",linewidth = 1) +
geom_point(size = 1) +
scale_x_continuous(breaks = seq(min(data$correct_image), max(data$correct_image), 1)) +
labs(x = "Per Image", y = "Accuracy", title = "Condition2")
img_acc_c3 <- data_c3 %>%
group_by(correct_image) %>%
summarize(accuracy = mean(correct, na.rm = TRUE))
ggplot(img_acc_c3, aes(x = correct_image, y = accuracy)) +
geom_line(color = "grey",linewidth = 1) +
geom_point(size = 1) +
scale_x_continuous(breaks = seq(min(data$correct_image), max(data$correct_image), 1)) +
labs(x = "Per Image", y = "Accuracy", title = "Condition3")
participant_data <- data %>%
group_by(condition, respondent) %>%
summarise(
perc = mean(correct, na.rm = TRUE),
res_time = mean(response_time, na.rm = TRUE),
.groups = 'drop'
)
participant_data$condition <- as.factor(participant_data$condition)
anova <- aov(perc ~ condition, data = participant_data)
summary(anova)
tukey <- TukeyHSD(anova)
print(tukey)
data_combined <- bind_rows(
mutate(data_c1, condition = "Condition 1"),
mutate(data_c2, condition = "Condition 2"),
mutate(data_c3, condition = "Condition 3")
)
# Summarize response times by condition and correctness (optional, for printing)
response_time_summary <- data_combined %>%
group_by(condition, correct) %>%
summarize(
mean_response_time = mean(response_time, na.rm = TRUE),
median_response_time = median(response_time, na.rm = TRUE),
sd_response_time = sd(response_time, na.rm = TRUE),
.groups = "drop"
)
print(response_time_summary)
# Create the faceted boxplot
ggplot(data_combined, aes(x = factor(correct, labels = c("Incorrect", "Correct")), y = response_time)) +
geom_boxplot(fill = "skyblue3", alpha = 0.7) +
stat_summary(fun = mean, geom = "point", color = "red", size = 3) + # Increased point size
scale_y_log10() +
facet_wrap(~ condition) +  # This creates the separate panels
labs(
title = "Response Time by Correctness Across Conditions",
x = "Response Accuracy",
y = "Response Time (log scale)"
) +
theme_minimal() +
theme(strip.text = element_text(size = 12)) #Adjust the size of facet labels
bartlett.test(data$response_time~data$condition)
response_time_by_image <- data %>%
group_by(condition, correct_image) %>%
summarise(
Mean_ResponseTime = mean(response_time, na.rm = TRUE),
.groups = 'drop'
)
ggplot(response_time_by_image, aes(x = correct_image,
y = Mean_ResponseTime,
group = condition,
color = condition)) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(
title = "Response Times by Image for Each Condition",
x = "Image",
y = "Mean Response Time (ms)"
) +
scale_x_continuous(breaks = unique(response_time_by_image$correct_image)) +
facet_wrap(~condition, scales = "free_x", ncol = 1) +
theme_minimal()
# Combine data from all conditions
combined_data <- bind_rows(
data_c1 %>% mutate(Condition = "Condition1"),
data_c2 %>% mutate(Condition = "Condition2"),
data_c3 %>% mutate(Condition = "Condition3")
)
# Calculate accuracy per image for each condition
image_accuracy <- combined_data %>%
group_by(correct_image, Condition) %>%
summarize(accuracy = mean(correct, na.rm = TRUE), .groups = 'drop')
# Plot with facet_wrap for all conditions
ggplot(image_accuracy, aes(x = correct_image, y = accuracy)) +
geom_line(color = "grey", linewidth = 1) +
geom_point(size = 1) +
scale_x_continuous(breaks = seq(min(image_accuracy$correct_image), max(image_accuracy$correct_image), 1)) +
labs(x = "Per Image", y = "Accuracy", title = "Accuracy by Image for Each Condition") +
theme_minimal() +
facet_wrap(~Condition, scales = "free_y")
# Combine data from all conditions
combined_data <- bind_rows(
data_c1 %>% mutate(Condition = "Condition1"),
data_c2 %>% mutate(Condition = "Condition2"),
data_c3 %>% mutate(Condition = "Condition3")
)
# Calculate accuracy per image for each condition
image_accuracy <- combined_data %>%
group_by(correct_image, Condition) %>%
summarize(accuracy = mean(correct, na.rm = TRUE), .groups = 'drop')
# Plot all conditions in one plot with distinct colors
ggplot(image_accuracy, aes(x = correct_image, y = accuracy, color = Condition, group = Condition)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
scale_x_continuous(breaks = seq(min(image_accuracy$correct_image), max(image_accuracy$correct_image), 1)) +
labs(
x = "Per Image",
y = "Accuracy",
title = "Accuracy by Image Across Conditions"
) +
theme_minimal() +
scale_color_manual(values = c("Condition1" = "blue", "Condition2" = "green", "Condition3" = "red"))
# Combine data from all conditions
combined_data <- bind_rows(
data_c1 %>% mutate(Condition = "Condition1"),
data_c2 %>% mutate(Condition = "Condition2"),
data_c3 %>% mutate(Condition = "Condition3")
)
# Calculate accuracy per image for each condition
image_accuracy <- combined_data %>%
group_by(correct_image, Condition) %>%
summarize(accuracy = mean(correct, na.rm = TRUE), .groups = 'drop')
# Plot all conditions in one plot with distinct colors
ggplot(image_accuracy, aes(x = correct_image, y = accuracy, color = Condition, group = Condition)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
scale_x_continuous(breaks = seq(min(image_accuracy$correct_image), max(image_accuracy$correct_image), 1)) +
labs(
x = "Per Image",
y = "Accuracy",
title = "Accuracy by Image Across Conditions"
) +
theme_minimal() +
scale_color_manual(values = c("Condition1" = "navy", "Condition2" = "lightblue", "Condition3" = "azure"))
# Combine data from all conditions
combined_data <- bind_rows(
data_c1 %>% mutate(Condition = "Condition1"),
data_c2 %>% mutate(Condition = "Condition2"),
data_c3 %>% mutate(Condition = "Condition3")
)
# Calculate accuracy per image for each condition
image_accuracy <- combined_data %>%
group_by(correct_image, Condition) %>%
summarize(accuracy = mean(correct, na.rm = TRUE), .groups = 'drop')
# Plot all conditions in one plot with distinct colors
ggplot(image_accuracy, aes(x = correct_image, y = accuracy, color = Condition, group = Condition)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
scale_x_continuous(breaks = seq(min(image_accuracy$correct_image), max(image_accuracy$correct_image), 1)) +
labs(
x = "Per Image",
y = "Accuracy",
title = "Accuracy by Image Across Conditions"
) +
theme_minimal() +
scale_color_manual(values = c("Condition1" = "navy", "Condition2" = "lightblue", "Condition3" = "blue"))
# Combine data from all conditions
combined_data <- bind_rows(
data_c1 %>% mutate(Condition = "Condition1"),
data_c2 %>% mutate(Condition = "Condition2"),
data_c3 %>% mutate(Condition = "Condition3")
)
# Calculate accuracy per image for each condition
image_accuracy <- combined_data %>%
group_by(correct_image, Condition) %>%
summarize(accuracy = mean(correct, na.rm = TRUE), .groups = 'drop')
# Plot all conditions in one plot with distinct colors
ggplot(image_accuracy, aes(x = correct_image, y = accuracy, color = Condition, group = Condition)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
scale_x_continuous(breaks = seq(min(image_accuracy$correct_image), max(image_accuracy$correct_image), 1)) +
labs(
x = "Per Image",
y = "Accuracy",
title = "Accuracy by Image Across Conditions"
) +
theme_minimal() +
scale_color_manual(values = c("Condition1" = "navy", "Condition2" = "blue", "Condition3" = "lightblue"))
# Combine data from all conditions
combined_data <- bind_rows(
data_c1 %>% mutate(Condition = "Condition1"),
data_c2 %>% mutate(Condition = "Condition2"),
data_c3 %>% mutate(Condition = "Condition3")
)
# Calculate accuracy per image for each condition
image_accuracy <- combined_data %>%
group_by(correct_image, Condition) %>%
summarize(accuracy = mean(correct, na.rm = TRUE), .groups = 'drop')
# Plot all conditions in one plot with distinct colors
ggplot(image_accuracy, aes(x = correct_image, y = accuracy, color = Condition, group = Condition)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
scale_x_continuous(breaks = seq(min(image_accuracy$correct_image), max(image_accuracy$correct_image), 1)) +
labs(
x = "Per Image",
y = "Accuracy",
title = "Accuracy by Image Across Conditions"
) +
theme_minimal() +
scale_color_manual(values = c("Condition1" = "blue", "Condition2" = "navy", "Condition3" = "lightblue"))
if (!require(car)) install.packages("car")
library(car)
# Perform Levene's Test for homogeneity of variances
levene_test <- leveneTest(response_time ~ condition, data = data_combined)
# Print the results
print(levene_test)
if (!require(car)) install.packages("car")
library(car)
# Perform Levene's Test for homogeneity of variances
levene_test <- leveneTest(response_time ~ condition, data = data_combined)
# Print the results
print(levene_test)
# Perform Levene's Test for homogeneity of variances
levene_test <- leveneTest(response_time ~ condition, data = data_combined)
# Print the results
print(levene_test)
ggplot(response_time_by_image, aes(x = correct_image,
y = Mean_ResponseTime,
color = condition,
group = condition)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Response Times by Image Across Conditions",
x = "Image",
y = "Mean Response Time (ms)",
color = "Condition"
) +
scale_x_continuous(breaks = seq(min(response_time_by_image$correct_image),
max(response_time_by_image$correct_image), 1)) +
theme_minimal() +
theme(
legend.position = "top",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
plot.title = element_text(size = 14, face = "bold")
)
data_combined <- data_combined %>%
group_by(condition) %>%
mutate(
response_time_quartile = ntile(response_time, 4) # Divide into 4 quartiles
)
# Calculate proportion correct within each quartile and condition
correctness_by_quartile <- data_combined %>%
group_by(condition, response_time_quartile) %>%
summarize(
proportion_correct = mean(correct, na.rm = TRUE),
.groups = "drop"
)
# Plot correctness by response time quartiles
ggplot(correctness_by_quartile, aes(x = response_time_quartile, y = proportion_correct, color = condition, group = condition)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Proportion Correct by Response Time Quartiles",
x = "Response Time Quartile (1 = Fastest, 4 = Slowest)",
y = "Proportion Correct",
color = "Condition"
) +
theme_minimal() +
scale_x_continuous(breaks = 1:4)
library(pwr)
effect_size<-1.425
alpha<-0.05
result <- pwr.t.test(d = effect_size, n = 38, sig.level = alpha,alternative="greater")
print(result)
library(dplyr)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(effsize)
library(pwr)
library(car)
# Function to process files (improved)
process_files <- function(file_list, condition_label) {
df_list <- list()
for (i in seq_along(file_list)) {
df <- read.csv(file_list[i])
df <- df[, (ncol(df) - 4):ncol(df)] # Select the last 5 columns
df <- na.omit(df) # Remove rows with NA values
df$respondent <- substr(file_list[i], 23, 32) # Add a respondent ID
df$condition <- condition_label # Add a condition label
df$correct <- tolower(df$correct) == "true" # Convert to logical HERE!
df_list[[i]] <- df
}
bind_rows(df_list)
}
# Get file lists
file_list_c1 <- list.files("final data/condition1/", pattern = "\\.csv$", full.names = TRUE)
file_list_c2 <- list.files("final data/condition2/", pattern = "\\.csv$", full.names = TRUE)
file_list_c3 <- list.files("final data/condition3/", pattern = "\\.csv$", full.names = TRUE)
# Process each condition's data
data_c1 <- process_files(file_list_c1, "condition1")
data_c2 <- process_files(file_list_c2, "condition2")
data_c3 <- process_files(file_list_c3, "condition3")
# Combine all data (now works correctly)
data <- bind_rows(data_c1, data_c2, data_c3)
# Now data$correct is consistently logical
str(data$correct) # Check the structure
# Select necessary columns for analysis
selected_data1 <- data_c1 %>% select(correct_choice, correct_image, response_letter, correct, response_time, respondent, condition)
selected_data2 <- data_c2 %>% select(correct_choice, correct_image, response_letter, correct, response_time, respondent, condition)
selected_data3 <- data_c3 %>% select(correct_choice, correct_image, response_letter, correct, response_time, respondent, condition)
# Remove rows with NAs
cleaned_data1 <- na.omit(selected_data1)
cleaned_data1$correct <- as.logical(cleaned_data1$correct)
cleaned_data2 <- na.omit(selected_data2)
cleaned_data2$correct <- as.logical(cleaned_data2$correct)
cleaned_data3 <- na.omit(selected_data3)
cleaned_data3$correct <- as.logical(cleaned_data3$correct)
data <- bind_rows(cleaned_data1, cleaned_data2, cleaned_data3)
# Calculate overall accuracy
overall_accuracy <- mean(data$correct, na.rm = TRUE)
print(paste("Overall Accuracy: ", round(overall_accuracy * 100, 2), "%"))
# Check participant performance above chance level
participant_accuracy <- data %>%
group_by(condition, respondent) %>%
summarise(
participant_accuracy = mean(correct, na.rm = TRUE),
.groups = "drop"
)
mean_accuracy <- participant_accuracy %>%
group_by(condition) %>%
summarise(
mean_accuracy = mean(participant_accuracy, na.rm = TRUE),
se_accuracy = sd(participant_accuracy, na.rm = TRUE) / sqrt(n()),
.groups = "drop"
)
# Accuracy by condition plot
ggplot(mean_accuracy, aes(x = condition, y = mean_accuracy)) +
geom_bar(stat = "identity", width = 0.4) +
geom_errorbar(aes(ymin = mean_accuracy - se_accuracy, ymax = mean_accuracy + se_accuracy),
width = 0.1, color = "black") +
geom_hline(yintercept = 0.25, linetype = "dotted", color = "black") +
annotate("text", x = 3.35, y = 0.27, label = "Chance",
hjust = 0, size = 3, color = "black") +
theme_minimal() +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
labs(
title = "Participant Accuracy by Condition",
x = "Condition",
y = "Accuracy"
)
condition_accuracy <- data %>%
group_by(condition) %>%
summarise(Accuracy = mean(correct), .groups = 'drop')
condition_accuracy
# Combine data from all conditions
combined_data <- bind_rows(
data_c1 %>% mutate(Condition = "Condition1"),
data_c2 %>% mutate(Condition = "Condition2"),
data_c3 %>% mutate(Condition = "Condition3")
)
# Calculate accuracy per image for each condition
image_accuracy <- combined_data %>%
group_by(correct_image, Condition) %>%
summarize(accuracy = mean(correct, na.rm = TRUE), .groups = 'drop')
# Plot all conditions in one plot with distinct colors
ggplot(image_accuracy, aes(x = correct_image, y = accuracy, color = Condition, group = Condition)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
scale_x_continuous(breaks = seq(min(image_accuracy$correct_image), max(image_accuracy$correct_image), 1)) +
labs(
x = "Per Image",
y = "Accuracy",
title = "Accuracy by Image Across Conditions"
) +
theme_minimal() +
scale_color_manual(values = c("Condition1" = "blue", "Condition2" = "navy", "Condition3" = "lightblue"))
participant_data <- data %>%
group_by(condition, respondent) %>%
summarise(
perc = mean(correct, na.rm = TRUE),
res_time = mean(response_time, na.rm = TRUE),
.groups = 'drop'
)
participant_data$condition <- as.factor(participant_data$condition)
anova <- aov(perc ~ condition, data = participant_data)
summary(anova)
tukey <- TukeyHSD(anova)
print(tukey)
data_combined <- bind_rows(
mutate(data_c1, condition = "Condition 1"),
mutate(data_c2, condition = "Condition 2"),
mutate(data_c3, condition = "Condition 3")
)
# Summarize response times by condition and correctness (optional, for printing)
response_time_summary <- data_combined %>%
group_by(condition, correct) %>%
summarize(
mean_response_time = mean(response_time, na.rm = TRUE),
median_response_time = median(response_time, na.rm = TRUE),
sd_response_time = sd(response_time, na.rm = TRUE),
.groups = "drop"
)
print(response_time_summary)
# Create the faceted boxplot
ggplot(data_combined, aes(x = factor(correct, labels = c("Incorrect", "Correct")), y = response_time)) +
geom_boxplot(fill = "skyblue3", alpha = 0.7) +
stat_summary(fun = mean, geom = "point", color = "red", size = 3) + # Increased point size
scale_y_log10() +
facet_wrap(~ condition) +  # This creates the separate panels
labs(
title = "Response Time by Correctness Across Conditions",
x = "Response Accuracy",
y = "Response Time (log scale)"
) +
theme_minimal() +
theme(strip.text = element_text(size = 12)) #Adjust the size of facet labels
# Perform Levene's Test for homogeneity of variances
levene_test <- leveneTest(response_time ~ condition, data = data_combined)
print(levene_test)
ggplot(response_time_by_image, aes(x = correct_image,
y = Mean_ResponseTime,
color = condition,
group = condition)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Response Times by Image Across Conditions",
x = "Image",
y = "Mean Response Time (ms)",
color = "Condition"
) +
scale_x_continuous(breaks = seq(min(response_time_by_image$correct_image),
max(response_time_by_image$correct_image), 1)) +
theme_minimal() +
theme(
legend.position = "top",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
plot.title = element_text(size = 14, face = "bold")
)
data_combined <- data_combined %>%
group_by(condition) %>%
mutate(
response_time_quartile = ntile(response_time, 4) # Divide into 4 quartiles
)
# Calculate proportion correct within each quartile and condition
correctness_by_quartile <- data_combined %>%
group_by(condition, response_time_quartile) %>%
summarize(
proportion_correct = mean(correct, na.rm = TRUE),
.groups = "drop"
)
# Plot correctness by response time quartiles
ggplot(correctness_by_quartile, aes(x = response_time_quartile, y = proportion_correct, color = condition, group = condition)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Proportion Correct by Response Time Quartiles",
x = "Response Time Quartile (1 = Fastest, 4 = Slowest)",
y = "Proportion Correct",
color = "Condition"
) +
theme_minimal() +
scale_x_continuous(breaks = 1:4)
response_time_by_image <- data %>%
group_by(condition, correct_image) %>%
summarize(
Mean_ResponseTime = mean(response_time, na.rm = TRUE),
.groups = 'drop'
)
ggplot(response_time_by_image, aes(x = correct_image,
y = Mean_ResponseTime,
color = condition,
group = condition)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Response Times by Image Across Conditions",
x = "Image",
y = "Mean Response Time (ms)",
color = "Condition"
) +
scale_x_continuous(breaks = seq(min(response_time_by_image$correct_image),
max(response_time_by_image$correct_image), 1)) +
theme_minimal() +
theme(
legend.position = "top",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
plot.title = element_text(size = 14, face = "bold")
)
