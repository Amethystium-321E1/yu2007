### Data Preparation
#### Load Relevant Libraries and Functions
library(tidyverse)
library(readr)
#### Import data
data <- read_csv("data/0.csv")
data
#### Data exclusion / filtering
#### Prepare data for analysis - create columns etc.
str(data_combined)
library(tidyverse)
file_path <- "data/"
file_names <- paste0(file_path, 0:7, ".csv")
data_combined <- file_names %>%
lapply(read_csv) %>%
bind_rows()
str(data_combined)
View(data_combined)
data_combined
library(dplyr)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(effsize)
library(pwr)
install.packages("reticulate")
library(reticulate)
os <- import("os")
os$getcwd()
py_config()
repl_python()
quit
exit
library(dplyr)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(effsize)
library(pwr)
library(reticulate)
repl_python()
quit
import os
df_list <- list()
file_list <- list.files("raw_data/", pattern = "\\.csv$", full.names = TRUE)
for (i in seq_along(file_list)) {
df <- read.csv(file_list[i])
df <- df[, (ncol(df) - 4):ncol(df)]
df <- na.omit(df)
df$respondent <- i - 1
df_list[[i]] <- df
}
data <- bind_rows(df_list)
View(data)
library(dplyr)
df_list <- list()
file_list <- list.files("raw_data/", pattern = "\\.csv$", full.names = TRUE)
for (i in seq_along(file_list)) {
df <- read.csv(file_list[i])
df <- df[, (ncol(df) - 4):ncol(df)]
df <- na.omit(df)
df$respondent <- i - 1
df_list[[i]] <- df
}
data <- bind_rows(df_list)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(effsize)
library(pwr)
library(reticulate)
data <- data[, -1]
# Filter trials with extreme response times
mean_rt <- mean(data$response_time, na.rm = TRUE)
sd_rt <- sd(data$response_time, na.rm = TRUE)
data <- subset(data, response_time >= (mean_rt - 3 * sd_rt) & response_time <= (mean_rt + 3 * sd_rt))
# Check participant performance above chance level
participant_accuracy <- data %>%
group_by(respondent) %>%
summarize(accuracy = mean(correct))
# Keep participants above chance (50% for binary tasks)
data <- data[data$respondent %in% participant_accuracy$respondent[participant_accuracy$accuracy > 0.5], ]
# Calculate overall accuracy
overall_accuracy <- mean(data$correct, na.rm = TRUE)
print(paste("Overall Accuracy: ", round(overall_accuracy * 100, 2), "%"))
img_acc <- data %>%
group_by(correct_image) %>%
summarize(accuracy = mean(correct, na.rm = TRUE))
ggplot(img_acc, aes(x = correct_image, y = accuracy)) +
geom_line(color = "grey",linewidth = 1) +
geom_point(size = 1) +
scale_x_continuous(breaks = seq(min(data$correct_image), max(data$correct_image), 1)) +
labs(x = "Per Image", y = "Accuracy")
View(data)
library(dplyr)
df_list <- list()
file_list <- list.files("raw_data/", pattern = "\\.csv$", full.names = TRUE)
for (i in seq_along(file_list)) {
df <- read.csv(file_list[i])
df <- df[, (ncol(df) - 4):ncol(df)]
df <- na.omit(df)
df$respondent <- i - 1
df_list[[i]] <- df
}
data <- bind_rows(df_list)
data
data1 <- read.csv("data/data.csv",sep = "\t")
View(data1)
library(dplyr)
df_list <- list()
file_list <- list.files("raw_data/", pattern = "\\.csv$", full.names = TRUE)
for (i in seq_along(file_list)) {
df <- read.csv(file_list[i])
df <- df[, (ncol(df) - 4):ncol(df)]
df <- na.omit(df)
df$respondent <- i - 1
df_list[[i]] <- df
}
data <- bind_rows(df_list)
data
library(ggplot2)
library(tidyr)
library(tidyverse)
library(effsize)
library(pwr)
library(reticulate)
# Filter trials with extreme response times
mean_rt <- mean(data$response_time, na.rm = TRUE)
sd_rt <- sd(data$response_time, na.rm = TRUE)
data <- subset(data, response_time >= (mean_rt - 3 * sd_rt) & response_time <= (mean_rt + 3 * sd_rt))
# Check participant performance above chance level
participant_accuracy <- data %>%
group_by(respondent) %>%
summarize(accuracy = mean(correct))
# Keep participants above chance (50% for binary tasks)
data <- data[data$respondent %in% participant_accuracy$respondent[participant_accuracy$accuracy > 0.5], ]
# Calculate overall accuracy
overall_accuracy <- mean(data$correct, na.rm = TRUE)
print(paste("Overall Accuracy: ", round(overall_accuracy * 100, 2), "%"))
img_acc <- data %>%
group_by(correct_image) %>%
summarize(accuracy = mean(correct, na.rm = TRUE))
ggplot(img_acc, aes(x = correct_image, y = accuracy)) +
geom_line(color = "grey",linewidth = 1) +
geom_point(size = 1) +
scale_x_continuous(breaks = seq(min(data$correct_image), max(data$correct_image), 1)) +
labs(x = "Per Image", y = "Accuracy")
View(data)
library(dplyr)
df_list <- list()
file_list <- list.files("raw_data/", pattern = "\\.csv$", full.names = TRUE)
for (i in seq_along(file_list)) {
df <- read.csv(file_list[i])
df <- df[, (ncol(df) - 4):ncol(df)]
df <- na.omit(df)
df$respondent <- i - 1
df_list[[i]] <- df
}
data <- bind_rows(df_list)
data
library(dplyr)
df_list <- list()
file_list <- list.files("raw_data/", pattern = "\\.csv$", full.names = TRUE)
for (i in seq_along(file_list)) {
df <- read.csv(file_list[i])
df <- df[, (ncol(df) - 4):ncol(df)]
df <- na.omit(df)
df$respondent <- i - 1
df_list[[i]] <- df
}
data <- bind_rows(df_list)
data
# Filter trials with extreme response times
mean_rt <- mean(data$response_time, na.rm = TRUE)
sd_rt <- sd(data$response_time, na.rm = TRUE)
data <- subset(data, response_time >= (mean_rt - 3 * sd_rt) & response_time <= (mean_rt + 3 * sd_rt))
View(data)
# Check participant performance above chance level
participant_accuracy <- data %>%
group_by(respondent) %>%
summarize(accuracy = mean(correct))
# Check participant performance above chance level
participant_accuracy <- data %>%
group_by(respondent) %>%
summarize(accuracy = mean(correct))
library(dplyr)
df_list <- list()
file_list <- list.files("raw_data/", pattern = "\\.csv$", full.names = TRUE)
for (i in seq_along(file_list)) {
df <- read.csv(file_list[i])
df <- df[, (ncol(df) - 4):ncol(df)]
df <- na.omit(df)
df$respondent <- i - 1
df_list[[i]] <- df
}
data <- bind_rows(df_list)
data
library(ggplot2)
library(tidyr)
library(tidyverse)
library(effsize)
library(pwr)
library(reticulate)
# Filter trials with extreme response times
mean_rt <- mean(data$response_time, na.rm = TRUE)
sd_rt <- sd(data$response_time, na.rm = TRUE)
data <- subset(data, response_time >= (mean_rt - 3 * sd_rt) & response_time <= (mean_rt + 3 * sd_rt))
# Check participant performance above chance level
participant_accuracy <- data %>%
group_by(respondent) %>%
summarize(accuracy = mean(correct))
# Keep participants above chance (50% for binary tasks)
data <- data[data$respondent %in% participant_accuracy$respondent[participant_accuracy$accuracy > 0.5], ]
# Calculate overall accuracy
overall_accuracy <- mean(data$correct, na.rm = TRUE)
print(paste("Overall Accuracy: ", round(overall_accuracy * 100, 2), "%"))
View(data)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(effsize)
library(pwr)
library(reticulate)
# Filter trials with extreme response times
mean_rt <- mean(data$response_time, na.rm = TRUE)
library(dplyr)
df_list <- list()
file_list <- list.files("raw_data/", pattern = "\\.csv$", full.names = TRUE)
for (i in seq_along(file_list)) {
df <- read.csv(file_list[i])
df <- df[, (ncol(df) - 4):ncol(df)]
df <- na.omit(df)
df$respondent <- i - 1
df_list[[i]] <- df
}
data <- bind_rows(df_list)
data
View(data)
library(dplyr)
df_list <- list()
file_list <- list.files("raw_data/", pattern = "\\.csv$", full.names = TRUE)
for (i in seq_along(file_list)) {
df <- read.csv(file_list[i])
df <- df[, (ncol(df) - 4):ncol(df)]
df <- na.omit(df)
df$respondent <- i - 1
df_list[[i]] <- df
}
data <- bind_rows(df_list)
data$correct <- tolower(data$correct) == "true"
data
View(data)
library(dplyr)
df_list <- list()
file_list <- list.files("raw_data/", pattern = "\\.csv$", full.names = TRUE)
for (i in seq_along(file_list)) {
df <- read.csv(file_list[i])
df <- df[, (ncol(df) - 4):ncol(df)]
df <- na.omit(df)
df$respondent <- i - 1
df_list[[i]] <- df
}
data <- bind_rows(df_list)
data$correct <- tolower(data$correct) == "true"
data
library(ggplot2)
library(tidyr)
library(tidyverse)
library(effsize)
library(pwr)
library(reticulate)
# Filter trials with extreme response times
mean_rt <- mean(data$response_time, na.rm = TRUE)
sd_rt <- sd(data$response_time, na.rm = TRUE)
data <- subset(data, response_time >= (mean_rt - 3 * sd_rt) & response_time <= (mean_rt + 3 * sd_rt))
# Check participant performance above chance level
participant_accuracy <- data %>%
group_by(respondent) %>%
summarize(accuracy = mean(correct))
# Keep participants above chance (50% for binary tasks)
data <- data[data$respondent %in% participant_accuracy$respondent[participant_accuracy$accuracy > 0.5], ]
# Calculate overall accuracy
overall_accuracy <- mean(data$correct, na.rm = TRUE)
print(paste("Overall Accuracy: ", round(overall_accuracy * 100, 2), "%"))
img_acc <- data %>%
group_by(correct_image) %>%
summarize(accuracy = mean(correct, na.rm = TRUE))
ggplot(img_acc, aes(x = correct_image, y = accuracy)) +
geom_line(color = "grey",linewidth = 1) +
geom_point(size = 1) +
scale_x_continuous(breaks = seq(min(data$correct_image), max(data$correct_image), 1)) +
labs(x = "Per Image", y = "Accuracy")
response_time_summary <- data %>%
group_by(correct) %>%
summarize(
mean_response_time = mean(response_time, na.rm = TRUE),
median_response_time = median(response_time, na.rm = TRUE),
sd_response_time = sd(response_time, na.rm = TRUE)
)
print(response_time_summary)
ggplot(data, aes(x = factor(correct, labels = c("Incorrect", "Correct")), y = response_time)) +
geom_boxplot(fill = "skyblue3", alpha = 0.7) +
stat_summary(fun = mean, geom = "point", shape = 18, size = 3, color = "red") +
labs(
title = "Response Time by Correctness",
x = "Response Accuracy",
y = "Response Time"
) +
theme_minimal()
# Conduct t-test for response times
t_test <- t.test(response_time ~ correct, data = data)
t_test
cohens_d_result <- cohen.d(data$response_time ~ data$correct)
print(cohens_d_result)
pwr_result <- pwr.t.test(d = 0.5382748, sig.level = 0.05, power = 0.80, type = "two.sample")
print(pwr_result)
View(data)
response_time_summary <- data %>%
group_by(correct) %>%
summarize(
mean_response_time = mean(response_time, na.rm = TRUE),
median_response_time = median(response_time, na.rm = TRUE),
sd_response_time = sd(response_time, na.rm = TRUE)
)
print(response_time_summary)
ggplot(data, aes(x = factor(correct, labels = c("Incorrect", "Correct")), y = response_time)) +
geom_boxplot(fill = "skyblue3", alpha = 0.7) +
stat_summary(fun = mean, geom = "point", shape = 18, size = 3, color = "red") +
labs(
title = "Response Time by Correctness",
x = "Response Accuracy",
y = "Response Time"
) +
theme_minimal()
# Conduct t-test for response times
t_test <- t.test(response_time ~ correct, data = data)
t_test
